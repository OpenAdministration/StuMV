<?php

namespace App\Ldap;

use App\Ldap\Traits\FromCommunityScopeTrait;
use App\Ldap\Traits\SearchScopeTrait;
use LdapRecord\Models\OpenLDAP\User;
use LdapRecord\Models\Relations\HasManyIn;
use LdapRecord\Query\Builder;

class Group extends \LdapRecord\Models\OpenLDAP\Group
{
    use SearchScopeTrait;

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

    }

    public static function dnFrom(string $uid, string $cn){
        return "cn=$cn," . self::dnRoot($uid);
    }

    public static function dnRoot(string $uid){
        return "ou=Groups,ou=$uid,ou=Communities," . config('ldap.connections.default.base_dn');
    }

    public function setDnFrom(string $uid, string $cn): static
    {
        $dn = self::dnFrom($uid, $cn);
        return parent::setDn($dn);
    }

    public function scopeFromCommunity(Builder $query, string $uid): void
    {
        $query->setBaseDn( "ou=Groups,ou=$uid," . \App\Ldap\Community::$rootDn);
    }

    public function members(): HasManyIn
    {
        return $this->hasManyIn([Role::class, User::class], 'uniquemember')->using($this, 'uniquemember');
    }

    public function roles(): HasManyIn
    {
        return $this->hasManyIn([Role::class], 'uniquemember')->using($this, 'uniquemember');
    }

    public function users(): HasManyIn
    {
        return $this->hasManyIn([User::class], 'uniquemember')->using($this, 'uniquemember')->recursive();
    }

}
